{"version":3,"sources":["components/AppHeader.js","components/IssueList.js","App.js","serviceWorker.js","apollo-config.js","index.js"],"names":["AppHeader","react_default","a","createElement","className","IssueList","_ref","data","repoIssues","get","repoIssueList","map","item","key","status","statusClassName","issueStatus","node","state","title","href","url","FEED_QUERY","gql","_templateObject","App","components_AppHeader","react_apollo_browser_umd","query","loading","error","components_IssueList","Component","Boolean","window","location","hostname","match","httpLink","createHttpLink","uri","authLink","setContext","_","headers","token","Object","objectSpread","authorization","concat","client","ApolloClient","link","cache","InMemoryCache","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAUeA,SARG,WACd,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAChBH,EAAAC,EAAAC,cAAA,+DCgCKE,EA3BG,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACbC,EAAaC,cAAIF,EAAM,2BAEvBG,EAAgBF,GAAcA,EAAWG,IAAI,SAACC,EAAMC,GAAP,OACjDZ,EAAAC,EAAAC,cAAA,MAAIU,IAAKA,GATO,SAACC,GACnB,IAAMC,EAA6B,SAAXD,EAAoB,sBAAwB,wBACpE,OAAQb,EAAAC,EAAAC,cAAA,KAAGC,UAAWW,IAQjBC,CAAYJ,EAAKK,KAAKC,OACvBjB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iBAAiBQ,EAAKK,KAAKE,OAC3ClB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,OAAkCH,EAAAC,EAAAC,cAAA,KAAGiB,KAAMR,EAAKK,KAAKI,KAAMT,EAAKK,KAAKI,SAIzE,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,qCAEFF,EAAAC,EAAAC,cAAA,UACGO,gfCnBT,IAAMY,EAAaC,IAAHC,KA2CDC,mLAlBX,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACuB,EAAD,MACAzB,EAAAC,EAAAC,cAAA,WAASC,UAAU,oBACjBH,EAAAC,EAAAC,cAACwB,EAAA,MAAD,CAAOC,MAAON,GACX,SAAAhB,GAA8B,IAA3BuB,EAA2BvB,EAA3BuB,QAASC,EAAkBxB,EAAlBwB,MAAOvB,EAAWD,EAAXC,KAClB,OAAIsB,EAAgB5B,EAAAC,EAAAC,cAAA,0BAChB2B,EAAc7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,SACXH,EAAAC,EAAAC,cAAC4B,EAAD,CAAWxB,KAAMA,eAVpByB,aCnBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uGCbAC,EAAWC,YAAe,CAC5BC,IAAK,mCAGHC,EAAWC,YAAW,SAACC,EAADrC,GAAoB,IAAdsC,EAActC,EAAdsC,QACxBC,EAAQ,2CACd,MAAO,CACHD,QAAQE,OAAAC,EAAA,EAAAD,CAAA,GACDF,EADA,CAEHI,cAAoB,UAAAC,OAAaJ,QAKhCK,EAAS,IAAIC,IAAa,CACnCC,KAAMX,EAASQ,OAAOX,GACtBe,MAAO,IAAIC,MCbfC,IAASC,OACLvD,EAAAC,EAAAC,cAACwB,EAAA,eAAD,CAAgBuB,OAAQA,GACpBjD,EAAAC,EAAAC,cAACsD,EAAD,OAEJC,SAASC,eAAe,SFqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3eeef48b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst AppHeader = () => {\r\n    return(\r\n        <header className=\"l-app-header\">\r\n          <h3> Github Issues - JavaScript Frameworks</h3>\r\n        </header>\r\n    );    \r\n}\r\n\r\nexport default AppHeader;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { get } from 'lodash';\r\n\r\n//helper method to define the status with icon\r\nconst issueStatus = (status) => {\r\n  const statusClassName = status === 'OPEN' ? 'f-issue-status-open' : 'f-issue-status-closed';\r\n  return (<i className={statusClassName}></i>);\r\n}\r\n\r\nconst IssueList = ({ data }) => {\r\n  const repoIssues = get(data, 'repository.issues.edges');\r\n\r\n  const repoIssueList = repoIssues && repoIssues.map((item, key) =>\r\n    <li key={key}>\r\n      {issueStatus(item.node.state)}\r\n      <span className=\"l-issue-title\">{item.node.title}</span>\r\n      <span className=\"l-issue-url\">URL:<a href={item.node.url}>{item.node.url}</a></span>\r\n    </li>\r\n  );\r\n\r\n  return (\r\n    <div className=\"l-issue-list-container\">\r\n      <div className=\"l-issue-list-header\">\r\n        <h5>Repo: Facebook - React</h5>\r\n      </div>\r\n      <ul>\r\n        {repoIssueList}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nIssueList.propTypes = {\r\n  data: PropTypes.object\r\n}\r\n\r\nexport default IssueList;","import React, { Component } from 'react';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\n\nimport './App.css';\nimport AppHeader from './components/AppHeader.js';\nimport IssueList from './components/IssueList.js';\n\nconst FEED_QUERY = gql`\n  {\n    repository(owner:\"facebook\", name:\"react\") {\n      issues(last:20, states:[OPEN]) { \n        edges { \n          node {\n            title\n            url\n            state\n            labels(first:5) {\n              edges {\n                node {\n                  name\n                  description\n                }\n              }\n            }\n          }\n        }\n      }\n    }    \n  }\n`\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"l-app-container\">\n        <AppHeader />\n        <section className=\"l-issues-wrapper\">\n          <Query query={FEED_QUERY}>\n            {({ loading, error, data }) => {\n              if (loading) return <div>Fetching...</div>\n              if (error) return <div className=\"l-error\">Error</div>\n              return <IssueList data={data} />\n            }}\n          </Query>\n        </section>\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ApolloClient } from 'apollo-client'\r\nimport { createHttpLink } from 'apollo-link-http'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport { setContext } from 'apollo-link-context'\r\n\r\nconst httpLink = createHttpLink({\r\n    uri: 'https://api.github.com/graphql'\r\n})\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n    const token = '44a05b4361cce0059b93efa286e35d61f359cc3b';\r\n    return {\r\n        headers: {\r\n            ...headers,\r\n            authorization: token ? `Bearer ${token}` : ''\r\n        }\r\n    }\r\n})\r\n\r\nexport const client = new ApolloClient({\r\n    link: authLink.concat(httpLink),\r\n    cache: new InMemoryCache()\r\n})\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloProvider } from 'react-apollo';\nimport {client} from './apollo-config';\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}